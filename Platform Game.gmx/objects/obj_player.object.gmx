<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

view_object = obj_player;
instance_create(x,y,obj_controller);
    
//player state variables

//ability states:
//               0 for normal
//               1 for ice
//               2 for shield

invincible = false;

abilitystate = 0;
previousstate = 0;
transition = false;
transitiontime = 60;
canshield = true;
useshielddelay = 60;

//movement states
canmove = true;
jumping = false;
bouncing = false;
falling = false;

//location states
onground = false;
underwater = false;
atwatersurface = false;

//Physics Variables
grav = 1;
hsp = 0;
vsp = 0;
jumpspeed = 26;
movespeed = 8;
bouncespeed = 15;

watergrav = 0.3;
waterfriction = 0.1;
watermovespeed = 3;
waterjumpspeed = 12;

if global.checkpointR = room
{
    x = global.checkpointx;
    y = global.checkpointy;
    score = global.tempscore;
}











</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set controller vibration to 0
gamepad_set_vibration(0,0,0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set canshield to true
canshield = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set canmove to true
canmove = true;
transition = false;
previousstate = abilitystate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check if the player is outside room</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if the player is outside the room

if y &gt; room_height
if obj_controller.gameover = false
obj_controller.gameover = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>State Recognition, Input, Sprite, Sound, and Physics Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check the Player's Location States

//If the game is over, ignore all of this
if obj_controller.gameover
exit;

//Refresh the player's location states
//canmove = true;
onground = false;
atwatersurface = false;
underwater = false;

//Check player's location states

//If the player is on a falling block

//If the player is on the ground
if place_meeting(x,y+1,obj_collision)
onground = true;
    
//If the player is in the water
if place_meeting(x,y,obj_water)
{
    if place_meeting(x,y+1,obj_watersurface)
    atwatersurface = true;  
    else    //It's very important that this is an "else" function, or both watersurface and underwater can be set to true at the same time
    underwater = true; 
}


    


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check the Player's Movement States

//If the game is over, ignore all of this
if obj_controller.gameover
exit;

//Refresh the player's movement states
falling = false;
jumping = false;
bouncing = false;

//Check the player's movement states

//Check if the player is falling
if vsp &gt; 0
falling = true;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check the Player's Ability State

input_ability_pressed = keyboard_check_pressed(vk_space) || gamepad_button_check_pressed(0,global.gp_RT);
input_ability = keyboard_check(vk_space) || gamepad_button_check(0,global.gp_RT);
input_ability_released = keyboard_check_released(vk_space) || gamepad_button_check_released(0,global.gp_RT);

if abilitystate = 1 //If the player is in ice mode 
{
    if input_ability_pressed
    {
        if instance_exists(obj_iceability)
        with (obj_iceability) instance_destroy();
        instance_create(x,y-75,obj_iceability);
        
        if !audio_is_playing(snd_iceability)
        audio_play_sound(snd_iceability, 10, false);
    }
    
    if input_ability
    {
     canmove = false;
    }
    
    if input_ability_released
    {
        obj_iceability.gravity = 1;
        canmove = true;
    }
}

if abilitystate = 2 //If the player is in shield mode
{
    if input_ability_pressed &amp;&amp; canshield = true
    {
        if instance_exists(obj_shieldability)
        with (obj_shieldability) instance_destroy();
        instance_create(x,y,obj_shieldability);
        
        canshield = false;
        alarm[1] = useshielddelay;
        
        if !audio_is_playing(snd_shieldability)
        audio_play_sound(snd_shieldability, 10, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check the Player's Input

//Keyboard inputs
input_right = keyboard_check(ord('D')) or keyboard_check(vk_right);
input_left = keyboard_check(ord('A')) or keyboard_check(vk_left);
input_jump = keyboard_check(ord('W')) or keyboard_check(vk_up) or gamepad_button_value(0,global.gp_A);
input_jump_released = keyboard_check_released(ord('W')) or keyboard_check_released(vk_up) or gamepad_button_check_released(0,global.gp_A);

input_invincible_pressed = keyboard_check_pressed(ord('K')) or gamepad_button_check_pressed(0,global.gp_DU);

gp_leftright = gamepad_axis_value(0,gp_axislh);

//React to inputs
if canmove = true
{
 move = -input_left + input_right + gp_leftright;
}
else
move = 0;


//Check if the player is jumping
if input_jump
{
    if onground || atwatersurface
    {
     gamepad_set_vibration(0,1,1);
     alarm[2] = 6;
     jumping = true;
    }
    else
    jumping = false;
    
    if abilitystate = 1 &amp;&amp; instance_exists(obj_iceability)
    {
        jumping = false;
    }
}

if input_invincible_pressed
{
 invincible = !invincible;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play Sounds According to the Player State

if jumping = true
{
    if not audio_is_playing(snd_jump)
    audio_play_sound(snd_jump,10,false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the Player Sprite Accordingly

//Change which way the player is facing depending on which way is moving

if hsp != 0
image_xscale = sign(hsp); 

if transition = false
{
    if abilitystate = 0
    {
        if onground
        {
            if hsp != 0
            sprite_index = spr_playerrunning;  
            else
            if !input_jump
            sprite_index = spr_player;
        } 
        else if underwater or atwatersurface
        {
            if hsp != 0
            sprite_index = spr_playerswimming;
            else
            sprite_index = spr_player;
        }
        else
        sprite_index = spr_playerjumping;
    }
    
    if abilitystate = 1
    {
        if onground
        {
            if hsp != 0
            sprite_index = spr_iceplayerrunning;  
            else
            if !input_jump
            sprite_index = spr_iceplayer;
        } 
        else if underwater or atwatersurface
        {
            if hsp != 0
            sprite_index = spr_iceplayerswimming;
            else
            sprite_index = spr_iceplayer;
        }
        else
        sprite_index = spr_iceplayerjumping;
    }
    
    if abilitystate = 2
    {
        if onground
        {
            if hsp != 0
            sprite_index = spr_shieldplayerrunning;  
            else
            if !input_jump
            sprite_index = spr_shieldplayer;
        } 
        else if underwater or atwatersurface
        {
            if hsp != 0
            sprite_index = spr_shieldplayerswimming;
            else
            sprite_index = spr_shieldplayer;
            
        }
        else
        sprite_index = spr_shieldplayerjumping;
    }
}
else
{
 image_speed = 0.08;
 
 if abilitystate = 1
 {
  if previousstate = 0
  {
   sprite_index = spr_normaltoice;
  }
  if previousstate = 2
  {
   sprite_index = spr_icetoshield;
   image_speed = -0.08;
  }
 }
 
  if abilitystate = 2
 {
  if previousstate = 0
  {
   sprite_index = spr_normaltoshield;
  }
  if previousstate = 1
  {
   sprite_index = spr_icetoshield;
  }
 }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics Calculations

//If the game is over, ignore all of this
if obj_controller.gameover
exit;

if canmove = 0 &amp;&amp; !audio_is_playing(snd_transition)
gamepad_set_vibration(0,0,0);
 
//If the player is not in water
if !atwatersurface &amp;&amp; !underwater
{
    //Set the animation speed
    if transition = false
    image_speed = 0.2*move/1;
    
    //Set the hsp and vsp on land and in the air
    hsp = move * movespeed;
    vsp += grav;
    
    //If the player is on the ground, we should allow the player to jump
    if canmove = true &amp;&amp; onground
    vsp += input_jump *-jumpspeed;

}

else //If the player is in the water
{
    
    //Set the animation speed
    if transition = false
    image_speed = 0.1*move/1;
    
    //Set the hsp and vsp in water
    hsp = move * watermovespeed;
    vsp += (input_jump * -watermovespeed + watergrav);
    
    //Limit the player's move speed in water
    vsp = clamp(vsp,-watermovespeed,watermovespeed);
    
    //If the player is at the water surface, we should allow the player to jump
    if canmove = true &amp;&amp; atwatersurface
    vsp += input_jump * -waterjumpspeed;
}

//Prevent the Player from exiting the room
if (x + hsp) &lt; 20 || (x + hsp) &gt; (room_width - 20)
{
    hsp = 0;
}

//Horizontal Collision Calculations
if place_meeting(x+hsp,y,obj_collision)
{
    while(!place_meeting(x+sign(hsp),y,obj_collision))
    {
        x += sign(hsp);  
    }
    hsp = 0;  
}

//Vertical Collision Calculations
if place_meeting(x,y+vsp,obj_collision)
{
    while(!place_meeting(x,y+sign(vsp),obj_collision))
    {
        y += sign(vsp);  
    }
    vsp = 0;
}


//Move the player according to these calculations
 x += hsp;
 y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collision scripts</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Ice Pickup

collision_icepickup = instance_place(x,y,obj_icepickup);

if collision_icepickup &amp;&amp; obj_controller.gameover = false
{
    with(collision_icepickup) instance_destroy();
    previousstate = abilitystate;
    abilitystate = 1;
    
    canmove = 0;
    transition = true;
    alarm[0] = transitiontime;
    audio_play_sound(snd_transition,10,false);
    
    gamepad_set_vibration(0,0.5,0.5);
    alarm[2] = transitiontime;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Shield Pickup

collision_shieldpickup = instance_place(x,y,obj_shieldpickup);

if collision_shieldpickup &amp;&amp; obj_controller.gameover = false
{
    with(collision_shieldpickup) instance_destroy();
    previousstate = abilitystate;
    abilitystate = 2;
    
    canmove = 0;
    transition = true;
    alarm[0] = transitiontime;
    audio_play_sound(snd_transition,10,false);
    
    gamepad_set_vibration(0,0.5,0.5);
    alarm[2] = transitiontime;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with coins
collision_goldcoin = instance_place(x,y,obj_goldcoin);

if collision_goldcoin &amp;&amp; obj_controller.gameover = false
{
    obj_controller.score += collision_goldcoin.worth;
    with(collision_goldcoin) instance_destroy();
    audio_play_sound(snd_coingold, 10, false);
    
    gamepad_set_vibration(0,0.5,0.5);
    alarm[2] = 4;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with ghosts

collision_ghost = instance_place(x,y,obj_ghost);
 
if collision_ghost &amp;&amp; obj_controller.gameover = false &amp;&amp; collision_ghost.dead = false
{
    if y &lt; collision_ghost.yposition
    {
            collision_ghost.dead = true;
            
            vsp = -bouncespeed;
            audio_play_sound(snd_bounce,10,false);
            
            bouncing = true;
            obj_controller.score += collision_ghost.worth;
            
            gamepad_set_vibration(0,1,1);
            alarm[2] = 6;
    }
    else
    {
        obj_controller.gameover = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with pinkfish

collision_pinkfish = instance_place(x,y,obj_pinkfish);

if collision_pinkfish &amp;&amp; obj_controller.gameover = false &amp;&amp; collision_pinkfish.dead = false
{
    //if y &lt; collision_pinkfish.yposition 
    //{
    //        collision_pinkfish.dead = true;
            
    //        vsp = -bouncespeed;
    //        audio_play_sound(snd_bounce,10,false);
            
    //        bouncing = true;
    //        obj_controller.score += collision_pinkfish.worth;
            
    //        gamepad_set_vibration(0,1,1);
    //        alarm[2] = 6;
    //}
    //else
    //{
        obj_controller.gameover = true;
    //}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with bouncer

collision_bouncer = instance_place(x,y,obj_bouncer);
 
if collision_bouncer &amp;&amp; obj_controller.gameover = false &amp;&amp; collision_bouncer.dead = false
{
    if y &lt; collision_bouncer.yposition
    {
            collision_bouncer.dead = true;
            
            vsp = -2.5*bouncespeed;
            audio_play_sound(snd_bounce,10,false);
            
            bouncing = true;
            obj_controller.score += collision_bouncer.worth;
            
            gamepad_set_vibration(0,1,1);
            alarm[2] = 6;
    }
    else
    {
        obj_controller.gameover = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with spikes

collision_spike = instance_place(x,y,obj_spike) 

if collision_spike &amp;&amp; obj_controller.gameover = false
{
    if collision_spike.deflected = false
    obj_controller.gameover = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Teleporter

if place_meeting(x,y,obj_teleporter)
{   
    if instance_exists(obj_receiver)
    {
     obj_player.x = obj_receiver.x + 50;
     obj_player.y = obj_receiver.y - 50;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_boxcoin</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with boxcoins

if place_meeting(x,y+3,obj_player)
{   
    obj_player.vsp = 0;
    
    if coins &gt; 0
    {
        activated = true;
        instance_create(x+35,y,obj_tempgoldcoin); 
        coins -= 1;
        
        gamepad_set_vibration(0,1,1);
        alarm[2] = 6;  
    }
}

if coins = 0 
{
    sprite_index = spr_boxcoinaltdisabled;
}

if activated = true
{ 
    if activatetime &gt; halftime
    {
     //move box up
     y -= hitspeed;
    }
    else if activatetime &gt; 0
    {
    //move box down
     y += hitspeed;
    }
    
    if activatetime = 0
    {
        activated = false;
        if coins &gt; 0
        activatetime = 10;
        exit;
    }
    
    activatetime -= 1;
    
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Fading Block

collision_fadingblock = instance_place(x,y+1,obj_fadingblock)

if collision_fadingblock &amp;&amp; obj_controller.gameover = false
{
 if collision_fadingblock.touched = false
 {
  collision_fadingblock.alarm[0] = collision_fadingblock.falldelay;
  collision_fadingblock.touched = true;
 }
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with spikeblockhl

collision_spikeblockhl = instance_place(x,y,obj_spikeblockhl)

if collision_spikeblockhl &amp;&amp; obj_controller.gameover = false
{
    obj_controller.gameover = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with spikeblockhr

collision_spikeblockhr = instance_place(x,y,obj_spikeblockhr)

if collision_spikeblockhr &amp;&amp; obj_controller.gameover = false
{
    obj_controller.gameover = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with spikeblockvu

collision_spikeblockvu = instance_place(x,y,obj_spikeblockvu)

if collision_spikeblockvu &amp;&amp; obj_controller.gameover = false
{
    obj_controller.gameover = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with spikeblockvd

collision_spikeblockvd = instance_place(x,y,obj_spikeblockvd)

if collision_spikeblockvd &amp;&amp; obj_controller.gameover = false
{
    obj_controller.gameover = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
